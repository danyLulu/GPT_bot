from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ConversationHandler, MessageHandler, filters
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
import openai
import os
from dotenv import load_dotenv
from util import (
    send_photo, send_text, load_message, show_main_menu
)
from gpt_service.gpt import gpt, gpt_dialog
from osnov_servis.random_facts import get_random_fact
from osnov_servis.talk import talk, talk_dialog, load_character_prompt
from osnov_servis.shared import dialog, chatgpt
from osnov_servis.quiz import (
    quiz_command, quiz_start, topic_selected,
    handle_quiz_answer, handle_quiz_callback,
    SELECTING_TOPIC, ANSWERING_QUESTION
)
from osnov_servis.business_ideas import (
    business_command, business_start, category_selected,
    handle_business_callback, SELECTING_CATEGORY, GENERATING_IDEA
)

import httpx
import logging

from telegram import InputMediaPhoto

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
required_env_vars = ["TG_BOT_TOKEN", "CHATGPT_TOKEN"]
missing_vars = [var for var in required_env_vars if not os.getenv(var)]
if missing_vars:
    raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram
try:
    application = Application.builder().token(os.getenv("TG_BOT_TOKEN")).build()
except Exception as e:
    raise RuntimeError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞: {e}")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è GPT –¥–∏–∞–ª–æ–≥–∞
CHATTING = 0


async def start(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    dialog.mode = "main"
    text = load_message("main")
    await send_photo(update, context, "main")
    await send_text(update, context, text)
    await show_main_menu(update, context, {
        "start": "–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞",
        "gpt": "–∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —á–∞—Ç—É GPT üß†",
        "talk": "–ø–µ—Ä–µ–ø–∏—Å–∫–∞ —Å–æ –∑–≤–µ–∑–¥–∞–º–∏ üòà",
        "fact": "—Ä–∞–Ω–¥–æ–º–Ω—ã–π —Ñ–∞–∫—Ç",
        "quiz": "–ø—Ä–æ–≤–µ—Ä—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è üéØ",
        "business": "–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–¥–µ–π –¥–ª—è –±–∏–∑–Ω–µ—Å–∞ üí°"
    })


async def talk_button(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –¥–∏–∞–ª–æ–≥–∞ —Å –ª–∏—á–Ω–æ—Å—Ç—è–º–∏"""
    query = update.callback_query
    await query.answer()
    await send_photo(update, context, query.data)
    await send_text(update, context, "–æ—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—â–∞—Ç—å—Å—è!")
    prompt = load_character_prompt(query.data)
    chatgpt.set_prompt(prompt)


async def random_fact(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ñ–∞–∫—Ç–∞"""
    fact = get_random_fact()

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = [
        [InlineKeyboardButton("üé≤ –ï—â–µ —Ñ–∞–∫—Ç", callback_data="new_fact")],
        [InlineKeyboardButton("üìö –ï—â–µ —Ñ–∞–∫—Ç (–±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏)", callback_data="new_fact_no_photo")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ (—á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /fact)
    if update.message:
        await send_photo(update, context, "facts")
        await update.message.reply_text(
            f"üìö <b>–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç:</b>\n\n{fact}",
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
    # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤ (—á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É)
    else:
        query = update.callback_query
        await query.answer()

        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–∫—Ç
        new_fact = get_random_fact()

        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            await query.edit_message_text(
                f"üìö <b>–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç:</b>\n\n{new_fact}",
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–∞–∫—Ç–∞: {e}")
            # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await query.message.reply_text(
                f"üìö <b>–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç:</b>\n\n{new_fact}",
                reply_markup=reply_markup,
                parse_mode='HTML'
            )


async def fact_button(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–æ–≤–æ–≥–æ —Ñ–∞–∫—Ç–∞"""
    query = update.callback_query
    await query.answer()

    if query.data == "new_fact_no_photo":
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–∫—Ç –±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏
        fact = get_random_fact()
        keyboard = [
            [InlineKeyboardButton("üé≤ –ï—â–µ —Ñ–∞–∫—Ç", callback_data="new_fact")],

        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        try:
            await query.edit_message_text(
                f"üìö <b>–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç:</b>\n\n{fact}",
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–∞–∫—Ç–∞: {e}")
            await query.message.reply_text(
                f"üìö <b>–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç:</b>\n\n{fact}",
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
    else:
        return await random_fact(update, context)


async def business_button(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∏–¥–µ–π"""
    query = update.callback_query
    await query.answer()
    return await business_start(update, context)


# –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–≤–∏–∑–∞
quiz_handler = ConversationHandler(
    entry_points=[
        CommandHandler('quiz', quiz_command),
        CallbackQueryHandler(quiz_start, pattern='^quiz_interface$')
    ],
    states={
        SELECTING_TOPIC: [
            CallbackQueryHandler(topic_selected, pattern=r'^quiz_topic_'),
            CallbackQueryHandler(handle_quiz_callback, pattern=r'^quiz_')
        ],
        ANSWERING_QUESTION: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_quiz_answer),
            CallbackQueryHandler(handle_quiz_callback, pattern=r'^quiz_')
        ]
    },
    fallbacks=[
        CommandHandler('quiz', quiz_command),
        CallbackQueryHandler(quiz_start, pattern='^quiz_interface$')
    ],
    per_chat=True,
    per_message=False,
    name="quiz_conversation"
)

# –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∏–¥–µ–π
business_handler = ConversationHandler(
    entry_points=[
        CommandHandler('business', business_command),
        CallbackQueryHandler(business_start, pattern='^business_interface$')
    ],
    states={
        SELECTING_CATEGORY: [
            CallbackQueryHandler(category_selected, pattern=r'^business_category_'),
            CallbackQueryHandler(handle_business_callback, pattern=r'^business_'),
            CallbackQueryHandler(handle_business_callback, pattern=r'^main_menu$')
        ],
        GENERATING_IDEA: [
            CallbackQueryHandler(handle_business_callback, pattern=r'^business_'),
            CallbackQueryHandler(handle_business_callback, pattern=r'^main_menu$')
        ]
    },
    fallbacks=[
        CommandHandler('business', business_command),
        CallbackQueryHandler(business_start, pattern='^business_interface$')
    ],
    per_chat=True,
    per_message=False,
    name="business_conversation"
)


async def gpt_command(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /gpt"""
    await send_photo(update, context, "gpt")
    await send_text(update, context, "ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç —Å GPT!</b>\n\n"
                                     "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ç–µ–º–∞–º–∏. "
                                     "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∏–∂–µ:")

    keyboard = [
        [
            InlineKeyboardButton("üí≠ –û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="gpt_topic_general"),
            InlineKeyboardButton("üíª –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="gpt_topic_programming")
        ],
        [
            InlineKeyboardButton("üî¨ –ù–∞—É–∫–∞", callback_data="gpt_topic_science"),
            InlineKeyboardButton("üé® –ò—Å–∫—É—Å—Å—Ç–≤–æ", callback_data="gpt_topic_art")
        ],
        [
            InlineKeyboardButton("üìö –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", callback_data="gpt_topic_education"),
            InlineKeyboardButton("üíº –ë–∏–∑–Ω–µ—Å", callback_data="gpt_topic_business")
        ],
        [InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="gpt_main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "üéØ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –æ–±—â–µ–Ω–∏—è:</b>\n\n"
        "üí° <i>–ö–∞–∂–¥–∞—è —Ç–µ–º–∞ –∏–º–µ–µ—Ç —Å–≤–æ–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é</i>",
        reply_markup=reply_markup,
        parse_mode='HTML'
    )
    return CHATTING


async def gpt_start(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞ —Å GPT"""
    query = update.callback_query
    await query.answer()
    await send_photo(update, context, "gpt")
    await send_text(update, context, "ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç —Å GPT!</b>\n\n"
                                     "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ç–µ–º–∞–º–∏. "
                                     "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∏–∂–µ:")

    keyboard = [
        [
            InlineKeyboardButton("üí≠ –û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="gpt_topic_general"),
            InlineKeyboardButton("üíª –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="gpt_topic_programming")
        ],
        [
            InlineKeyboardButton("üî¨ –ù–∞—É–∫–∞", callback_data="gpt_topic_science"),
            InlineKeyboardButton("üé® –ò—Å–∫—É—Å—Å—Ç–≤–æ", callback_data="gpt_topic_art")
        ],
        [
            InlineKeyboardButton("üìö –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", callback_data="gpt_topic_education"),
            InlineKeyboardButton("üíº –ë–∏–∑–Ω–µ—Å", callback_data="gpt_topic_business")
        ],
        [InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="gpt_main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text(
        "üéØ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –æ–±—â–µ–Ω–∏—è:</b>\n\n"
        "üí° <i>–ö–∞–∂–¥–∞—è —Ç–µ–º–∞ –∏–º–µ–µ—Ç —Å–≤–æ–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é</i>",
        reply_markup=reply_markup,
        parse_mode='HTML'
    )
    return CHATTING


async def gpt_topic_selected(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã GPT"""
    query = update.callback_query
    await query.answer()

    topic = query.data.split('_')[-1]
    topics = {
        'general': "üí≠ –æ–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã",
        'programming': "üíª –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ",
        'science': "üî¨ –Ω–∞—É–∫—É",
        'art': "üé® –∏—Å–∫—É—Å—Å—Ç–≤–æ",
        'education': "üìö –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ",
        'business': "üíº –±–∏–∑–Ω–µ—Å"
    }

    topic_descriptions = {
        'general': "–ó–∞–¥–∞–≤–∞–π—Ç–µ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –æ–±—â–∏–µ —Ç–µ–º—ã. –Ø –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –¥–∞—Ç—å –≤–∞–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–ª–µ–∑–Ω—ã–π –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –æ—Ç–≤–µ—Ç.",
        'programming': "–í–æ–ø—Ä–æ—Å—ã –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é, –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º. –ú–æ–≥—É –ø–æ–º–æ—á—å —Å –∫–æ–¥–æ–º, –æ–±—ä—è—Å–Ω–∏—Ç—å –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ä–µ—à–µ–Ω–∏—è.",
        'science': "–û–±—Å—É–∂–¥–µ–Ω–∏–µ –Ω–∞—É—á–Ω—ã—Ö —Ç–µ–º –∏ –æ—Ç–∫—Ä—ã—Ç–∏–π. –û—Ç —Ñ–∏–∑–∏–∫–∏ –¥–æ –±–∏–æ–ª–æ–≥–∏–∏, –æ—Ç —Ö–∏–º–∏–∏ –¥–æ –∞—Å—Ç—Ä–æ–Ω–æ–º–∏–∏.",
        'art': "–†–∞–∑–≥–æ–≤–æ—Ä—ã –æ–± –∏—Å–∫—É—Å—Å—Ç–≤–µ, –∫—É–ª—å—Ç—É—Ä–µ –∏ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–µ. –û–±—Å—É–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–π, —Å—Ç–∏–ª–µ–π –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π.",
        'education': "–í–æ–ø—Ä–æ—Å—ã –ø–æ –æ–±—É—á–µ–Ω–∏—é –∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—é. –ü–æ–º–æ—â—å –≤ –∏–∑—É—á–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏–π.",
        'business': "–¢–µ–º—ã –±–∏–∑–Ω–µ—Å–∞, –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –∏ —ç–∫–æ–Ω–æ–º–∏–∫–∏. –ê–Ω–∞–ª–∏–∑ –∏–¥–µ–π, —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∏ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–π."
    }

    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = [
            [InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="gpt_ask_question")],
            [InlineKeyboardButton("üîÑ –°–º–µ–Ω–∏—Ç—å —Ç–µ–º—É", callback_data="gpt_change_topic")],
            [InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="gpt_main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.message.reply_text(
            f"‚úÖ <b>–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–µ–º—É: {topics.get(topic, topic)}</b>\n\n"
            f"<i>{topic_descriptions.get(topic, '')}</i>\n\n"
            "üí° –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã. –Ø –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –¥–∞—Ç—å –≤–∞–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π –æ—Ç–≤–µ—Ç.\n\n"
            "üîô –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            parse_mode='HTML',
            reply_markup=reply_markup
        )
        return CHATTING
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–µ–º—ã: {e}")
        await query.message.reply_text(
            "üòî <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–µ–º—ã</b>\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
            parse_mode='HTML'
        )
        return CHATTING


async def handle_gpt_message(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è GPT"""
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        status_message = await update.message.reply_text(
            "üí≠ <i>–î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º</i>",
            parse_mode='HTML'
        )

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç GPT
        response = await gpt(update.message.text)

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = [
            [InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å", callback_data="gpt_ask_question")],
            [InlineKeyboardButton("üîÑ –°–º–µ–Ω–∏—Ç—å —Ç–µ–º—É", callback_data="gpt_change_topic")],
            [InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="gpt_main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
        await status_message.delete()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å –∫—Ä–∞—Å–∏–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        await update.message.reply_text(
            f"ü§ñ <b>–û—Ç–≤–µ—Ç GPT:</b>\n\n{response}\n\n"
            "üí° <i>–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å, —Å–º–µ–Ω–∏—Ç—å —Ç–µ–º—É –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é</i>",
            parse_mode='HTML',
            reply_markup=reply_markup
        )
    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        keyboard = [
            [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="gpt_retry")],
            [InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="gpt_main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            "üòî <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é.",
            parse_mode='HTML',
            reply_markup=reply_markup
        )
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_gpt_message: {e}")

    return CHATTING


async def handle_gpt_callback(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è GPT"""
    query = update.callback_query
    await query.answer()

    if query.data == "gpt_main_menu":
        try:
            # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π GPT
            chatgpt.message_list.clear()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é
            await query.message.reply_text(
                "üè† <b>–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...</b>",
                parse_mode='HTML'
            )

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await show_main_menu(update, context, {
                "start": "–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞",
                "gpt": "–∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —á–∞—Ç—É GPT üß†",
                "talk": "–ø–µ—Ä–µ–ø–∏—Å–∫–∞ —Å–æ –∑–≤–µ–∑–¥–∞–º–∏ üòà",
                "fact": "—Ä–∞–Ω–¥–æ–º–Ω—ã–π —Ñ–∞–∫—Ç",
                "quiz": "–ø—Ä–æ–≤–µ—Ä—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è üéØ",
                "business": "–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–¥–µ–π –¥–ª—è –±–∏–∑–Ω–µ—Å–∞ üí°"
            })
            return ConversationHandler.END
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é: {e}")
            await query.message.reply_text(
                "üòî <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é</b>\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start",
                parse_mode='HTML'
            )
            return ConversationHandler.END

    elif query.data == "gpt_change_topic":
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await send_photo(update, context, "gpt")
            await send_text(update, context, "ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç —Å GPT!</b>\n\n"
                                             "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ç–µ–º–∞–º–∏. "
                                             "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∏–∂–µ:")

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–µ–º–∞–º–∏
            keyboard = [
                [
                    InlineKeyboardButton("üí≠ –û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="gpt_topic_general"),
                    InlineKeyboardButton("üíª –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="gpt_topic_programming")
                ],
                [
                    InlineKeyboardButton("üî¨ –ù–∞—É–∫–∞", callback_data="gpt_topic_science"),
                    InlineKeyboardButton("üé® –ò—Å–∫—É—Å—Å—Ç–≤–æ", callback_data="gpt_topic_art")
                ],
                [
                    InlineKeyboardButton("üìö –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", callback_data="gpt_topic_education"),
                    InlineKeyboardButton("üíº –ë–∏–∑–Ω–µ—Å", callback_data="gpt_topic_business")
                ],
                [InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="gpt_main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–º–∞–º–∏
            await query.message.reply_text(
                "üéØ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –æ–±—â–µ–Ω–∏—è:</b>\n\n"
                "üí° <i>–ö–∞–∂–¥–∞—è —Ç–µ–º–∞ –∏–º–µ–µ—Ç —Å–≤–æ–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é</i>",
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
            return CHATTING
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ç–µ–º—ã: {e}")
            await query.message.reply_text(
                "üòî <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ç–µ–º—ã</b>\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
                parse_mode='HTML'
            )
            return CHATTING

    elif query.data == "gpt_ask_question":
        try:
            await query.message.reply_text(
                "üí≠ <b>–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:</b>\n\n"
                "–Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º —Å –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–æ–º –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º–µ.",
                parse_mode='HTML'
            )
            return CHATTING
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –≤–æ–ø—Ä–æ—Å–∞: {e}")
            await query.message.reply_text(
                "üòî <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
                parse_mode='HTML'
            )
            return CHATTING

    elif query.data == "gpt_retry":
        try:
            await query.message.reply_text(
                "üîÑ <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –µ—â–µ —Ä–∞–∑:</b>\n\n"
                "–Ø –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –¥–∞—Ç—å –≤–∞–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–ª–µ–∑–Ω—ã–π –æ—Ç–≤–µ—Ç.",
                parse_mode='HTML'
            )
            return CHATTING
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ: {e}")
            await query.message.reply_text(
                "üòî <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
                parse_mode='HTML'
            )
            return CHATTING

    return CHATTING


# –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è GPT
gpt_handler = ConversationHandler(
    entry_points=[
        CommandHandler('gpt', gpt_command),
        CallbackQueryHandler(gpt_start, pattern='^gpt_interface$')
    ],
    states={
        CHATTING: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_gpt_message),
            CallbackQueryHandler(gpt_topic_selected, pattern=r'^gpt_topic_'),
            CallbackQueryHandler(handle_gpt_callback, pattern=r'^gpt_')
        ]
    },
    fallbacks=[
        CommandHandler('gpt', gpt_command),
        CallbackQueryHandler(gpt_start, pattern='^gpt_interface$'),
        CallbackQueryHandler(handle_gpt_callback, pattern=r'^gpt_')
    ],
    per_chat=True,
    per_message=False,
    name="gpt_conversation"
)

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
# –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º ConversationHandler'—ã
application.add_handler(gpt_handler)
application.add_handler(business_handler)
application.add_handler(quiz_handler)

# –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
application.add_handler(CommandHandler("start", start))
application.add_handler(CommandHandler("gpt", gpt_command))
application.add_handler(CommandHandler("talk", talk))
application.add_handler(CommandHandler("fact", random_fact))
application.add_handler(CommandHandler("business", business_command))

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, talk_dialog))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, gpt_dialog))

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
application.add_handler(CallbackQueryHandler(talk_button, pattern="^talk_.*"))
application.add_handler(CallbackQueryHandler(business_button, pattern="^business_interface$"))
application.add_handler(CallbackQueryHandler(fact_button, pattern="^(new_fact|new_fact_no_photo)$"))


# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
def error_handler(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {context.error}")
    if update and update.effective_message:
        update.effective_message.reply_text(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="main_menu")
            ]])
        )


application.add_error_handler(error_handler)

# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
if __name__ == '__main__':
    application.run_polling(allowed_updates=Update.ALL_TYPES)

